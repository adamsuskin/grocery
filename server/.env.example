# ============================================================================
# SERVER ENVIRONMENT VARIABLES
# ============================================================================
# Server-specific configuration for the Express authentication API
# SECURITY: Never commit actual secrets to version control!

# Database Configuration (PostgreSQL)
# Individual connection parameters for PostgreSQL
DB_USER=grocery
DB_PASSWORD=grocery
DB_HOST=localhost
DB_PORT=5432
DB_NAME=grocery_db

# Alternative: Full PostgreSQL connection string (if your app supports it)
# DATABASE_URL=postgresql://grocery:grocery@localhost:5432/grocery_db

# JWT Configuration
# JWT_SECRET: Secret key for signing JWT access tokens
# SECURITY: Use a strong, random string (minimum 32 characters)
# Generate with: openssl rand -base64 32
# NEVER use the default value in production!
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production

# JWT_REFRESH_SECRET: Secret key for signing JWT refresh tokens
# Must be different from JWT_SECRET for security
# Generate with: openssl rand -base64 32
JWT_REFRESH_SECRET=your-super-secret-refresh-key-change-this-in-production

# JWT_EXPIRES_IN: Access token expiration time
# Format: Use time strings like "15m", "1h", "7d"
# Recommended: 15m-1h for access tokens (short-lived)
# Shorter = more secure but requires more frequent refreshes
JWT_EXPIRES_IN=15m

# JWT_REFRESH_EXPIRES_IN: Refresh token expiration time
# Format: Use time strings like "7d", "30d", "90d"
# Recommended: 7d-30d for refresh tokens
JWT_REFRESH_EXPIRES_IN=7d

# Server Configuration
# PORT: Port number for the Express server to listen on
# Development: 3001
# Production: Use environment variable from hosting provider or 3001
PORT=3001

# NODE_ENV: Environment mode
# Values: "development" | "production" | "test"
# Controls logging, error messages, and performance optimizations
# In production: Error stack traces are hidden, optimizations enabled
NODE_ENV=development

# CORS_ORIGIN: Allowed CORS origins
# Development: http://localhost:3000
# Production: https://your-frontend-domain.com
# Multiple origins: Use comma-separated values
# Example: https://app.example.com,https://www.example.com
# WARNING: Never use "*" for APIs with authentication!
CORS_ORIGIN=http://localhost:3000

# ============================================================================
# SECURITY NOTES FOR PRODUCTION
# ============================================================================
#
# 1. JWT SECRETS:
#    - Generate strong, random secrets using: openssl rand -base64 32
#    - Use different secrets for JWT_SECRET and JWT_REFRESH_SECRET
#    - Store secrets in a secure secret manager (AWS Secrets Manager,
#      HashiCorp Vault, etc.) rather than .env files
#    - Rotate secrets periodically (every 90 days recommended)
#
# 2. DATABASE_URL:
#    - Use SSL/TLS connections in production
#    - Example: postgresql://user:pass@host:5432/db?sslmode=require
#    - Restrict database user permissions (principle of least privilege)
#    - Use connection pooling for better performance
#
# 3. CORS_ORIGIN:
#    - Always specify exact origins in production (never use "*")
#    - Include all your frontend domains (app, www, etc.)
#    - Consider using environment-specific values
#
# 4. NODE_ENV:
#    - Always set to "production" in production deployments
#    - This enables performance optimizations and security features
#    - Disables verbose error messages that could leak sensitive info
#
# 5. GENERAL:
#    - Never commit .env files with real secrets to git
#    - Use .env.local for local development (git-ignored)
#    - Set production secrets via hosting platform's secret management
#    - Enable HTTPS in production (use reverse proxy like nginx)
#    - Implement rate limiting to prevent brute force attacks
#    - Monitor failed login attempts and implement account lockouts
#    - Use environment variables from secure vaults in CI/CD pipelines
#
# ============================================================================
