# SSL/TLS Production Configuration
# This file extends docker-compose.prod.yml with SSL termination via nginx and Let's Encrypt
# Usage: docker-compose -f docker-compose.prod.yml -f docker-compose.ssl.yml up -d

services:
  # Override frontend to not expose port directly (nginx will handle it)
  frontend:
    ports: []
    expose:
      - "3000"

  # Override auth-server to not expose port directly
  auth-server:
    ports: []
    expose:
      - "3001"

  # Override zero-cache to not expose port directly
  zero-cache:
    ports: []
    expose:
      - "4848"

  # Nginx reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: grocery-nginx-ssl
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Nginx configuration with SSL settings
      - ./nginx-ssl.conf:/etc/nginx/templates/default.conf.template:ro
      # Let's Encrypt certificates
      - letsencrypt-certs:/etc/letsencrypt:ro
      - letsencrypt-www:/var/www/certbot:ro
      # Nginx logs
      - ./logs/nginx:/var/log/nginx
    environment:
      # Domain name for SSL certificate
      DOMAIN: ${DOMAIN:?Domain name required for SSL}
    depends_on:
      frontend:
        condition: service_healthy
      auth-server:
        condition: service_healthy
      zero-cache:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - grocery-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true

  # Certbot for Let's Encrypt SSL certificate management
  certbot:
    image: certbot/certbot:latest
    container_name: grocery-certbot
    volumes:
      # Share certificates with nginx
      - letsencrypt-certs:/etc/letsencrypt
      - letsencrypt-www:/var/www/certbot
      # Certbot logs
      - ./logs/certbot:/var/log/letsencrypt
    environment:
      # Email for Let's Encrypt notifications
      CERTBOT_EMAIL: ${CERTBOT_EMAIL:?Email required for Let's Encrypt}
      # Domain name for certificate
      DOMAIN: ${DOMAIN:?Domain name required for SSL}
    # Use certonly with webroot for certificate acquisition
    # Initial certificate acquisition command (run manually first time):
    # docker-compose -f docker-compose.prod.yml -f docker-compose.ssl.yml run --rm certbot certonly --webroot --webroot-path=/var/www/certbot --email $CERTBOT_EMAIL --agree-tos --no-eff-email -d $DOMAIN
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --webroot --webroot-path=/var/www/certbot; sleep 12h & wait $${!}; done;'"
    networks:
      - grocery-network
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

# Additional volumes for SSL certificates
volumes:
  letsencrypt-certs:
    driver: local
  letsencrypt-www:
    driver: local
