# Reverse Proxy Parameters
# Common proxy settings for all upstream services
# This file is included in proxy_pass locations to maintain consistency

# HTTP Version
# Use HTTP/1.1 for better connection reuse and WebSocket support
proxy_http_version 1.1;

# Connection Headers
# Allow connection upgrades (essential for WebSockets)
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $connection_upgrade;

# Connection upgrade map (defined at http level)
# Add this to your main nginx.conf http block if not already present:
# map $http_upgrade $connection_upgrade {
#     default upgrade;
#     '' close;
# }

# Host Headers
# Pass the original Host header to the backend
proxy_set_header Host $host;

# Pass the original request scheme (http or https)
proxy_set_header X-Forwarded-Proto $scheme;

# Client IP Headers
# Preserve the original client IP address through the proxy chain
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

# Forwarded Header (RFC 7239)
# Modern standard for proxy information
proxy_set_header Forwarded "for=$remote_addr;proto=$scheme;host=$host";

# Server Headers
# Pass the port information
proxy_set_header X-Forwarded-Port $server_port;

# Pass the server name
proxy_set_header X-Forwarded-Host $server_name;

# Custom Headers
# Add custom header to identify requests from this proxy
add_header X-Proxy-Cache $upstream_cache_status;

# Timeout Configuration
# Adjust these based on your application needs

# Time to establish connection with backend
proxy_connect_timeout 60s;

# Time to wait for backend response (increase for long-running requests)
proxy_send_timeout 60s;

# Time to read response from backend
proxy_read_timeout 60s;

# Buffer Configuration
# Optimize buffering for your use case

# Enable buffering for non-WebSocket requests
proxy_buffering on;

# Buffer size for response headers
proxy_buffer_size 4k;

# Number and size of buffers for response body
proxy_buffers 8 4k;
proxy_busy_buffers_size 8k;

# Maximum size of temporary file for buffering
proxy_max_temp_file_size 1024m;

# Request Configuration
# Control how requests are passed to backends

# Pass the request body to backend
proxy_pass_request_body on;

# Pass request headers to backend
proxy_pass_request_headers on;

# Don't pass these headers to backend (they'll be regenerated)
proxy_set_header Accept-Encoding "";

# Response Headers
# Control which headers are passed back from backend

# Hide backend server version for security
proxy_hide_header X-Powered-By;
proxy_hide_header Server;

# Redirect Handling
# Don't rewrite redirects from backend
proxy_redirect off;

# Cache Control
# Bypass cache when client sends cache-busting headers
proxy_cache_bypass $http_upgrade $http_pragma $http_authorization;

# Don't cache responses with these conditions
proxy_no_cache $http_upgrade $http_pragma $http_authorization;

# Cache Methods
# Only cache GET and HEAD requests
proxy_cache_methods GET HEAD;

# Error Handling
# What to do when backend is unavailable
proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
proxy_next_upstream_tries 3;
proxy_next_upstream_timeout 10s;

# Intercept backend errors
proxy_intercept_errors off;

# Body Size Limits
# Maximum allowed size of client request body
# Increase if you need to support large file uploads
client_max_body_size 20M;

# Request buffering
# Buffer client requests before sending to backend
client_body_buffer_size 128k;

# Keepalive
# Use keepalive connections to upstream servers (improves performance)
proxy_socket_keepalive on;

# SSL to Upstream (if backend uses HTTPS)
# Uncomment if your backend servers use HTTPS
# proxy_ssl_protocols TLSv1.2 TLSv1.3;
# proxy_ssl_ciphers HIGH:!aNULL:!MD5;
# proxy_ssl_verify off;
# proxy_ssl_session_reuse on;

# Notes:
# 1. WebSocket connections require:
#    - proxy_http_version 1.1
#    - proxy_set_header Upgrade $http_upgrade
#    - proxy_set_header Connection "upgrade"
#    - proxy_buffering off (set in specific location)
#
# 2. For long-polling or SSE, increase proxy_read_timeout
#
# 3. For file uploads, increase client_max_body_size
#
# 4. Add to http block in main nginx.conf:
#    map $http_upgrade $connection_upgrade {
#        default upgrade;
#        '' close;
#    }
#
# 5. For production, tune buffer sizes based on your traffic patterns
